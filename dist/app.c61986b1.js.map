{"version":3,"sources":["genesheet.ts","organism.ts","environment.ts","app.ts"],"names":[],"mappings":";;;;;;AGCA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,ADAM,UCAN,GAAA,CDGI,MCHJ,CAAA,YAAA,CAAA,CDGgB,UAAZ,EAA8B;AAAA;ACFlC,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADGQ;ACAR,ADCQ,ADNR,IEKI,AFLJ,KEKS,GAAG,GFLZ,CEKgB,EFLhB,OAAA,CEKgB,AFLhB,CEKgB,QAAJ,CAAa,GFLzB,CAAA,UEKY,CAAZ,EAAyC;ADEjC,OAAK,KAAL,GAAa,IAAI,CAAC,GAAL,CAAS,CAAC,UAAU,GAAC,CAAZ,IAAe,EAAxB,CAAb;ACAR,ADCQ,IDNK,CEKR,CAAC,CDCO,KCDb,EAAa,CFHT,GCII,GAAmB,IAAI,CAAC,GAAL,CAAS,CAAC,EDJrB,QCI+B,ADJ3C,EAA6B,CCIe,CAAZ,IAAe,EAAxB,CAAnB;AACH,ADL4B;AEKjC,aAAA,CAAA,cAAA,CAAe,CAAf,GAAkB;ADGlB,ADPQ,OAAK,ECOG,IDPR,GAAc,IAAI,GCO1B,CAA+B,ODPL,CAAA,ECO1B,EAAiD,KDP3B,CAAc,QAAd,CAAd;AEMR,ADEI,ADPC,MCOK,KCFV,CAAA,CDEiB,GAAG,IAAI,MCFxB,CAAe,CAAf,GAAkB,ADEE,CAAgB,UAAhB,CAAhB;AACA,AFbS,OAAA,CAAA,CEaF,MFbE,GAAU,EAAV;AGYb,ADCY,AFZZ,ACAA,IEWI,ADCQ,AFZN,GGWC,AFXP,CAAA,CCYiB,CCDP,CDCS,CFZL,EGWA,CHXG,CAAC,ACAlB,ECY0B,CAAC,AFZV,ACAjB,EDAuB,GGWT,ADCH,AFZM,CGWH,CHXc,CCA5B,EDAiB,EAAgB,GAAhB,CGWP,AHXV,CGWyB,EAAf,EAAmB,CAAC,KAAD,CAAnB,CAAV,EAAsC;ADCJ,AFXlC,IEWkC,AFX5B,WEWuC,AFX5B,EEW8B,CFX3B,CAAC,KEWiC,CAAC,AFXnC,EAAS,KAAT,CAApB;AGYA,ADDW,AFRA,GGSR,ADDC,CCCA,AFNS,GDHF,CAAA,KGSX,CAAc,KHTH,CGSX,EAAqB,AHTa,EAAvB;AESV,ADJG,sBAAY,QAAZ,EAA8B,eAA9B,EAA0D;AEK9D,AHRA,ACG8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","file":"app.c61986b1.js","sourceRoot":"..\\src","sourcesContent":["import _ from \"lodash\"\r\n\r\nexport const SEQ_LEN = 12\r\nconst DNA_DESC = [\"A\", \"T\", \"C\", \"G\"]\r\nconst CODON_FEATS = [\"GOOD\", \"BAD\"]\r\n\r\n\r\nexport let UNIV_CODONS:string[] = []\r\n\r\nconst new_dna = () => DNA_DESC[Math.floor((Math.random() * DNA_DESC.length))]\r\nconst new_sequence = (seq_len:number) => [...Array(seq_len)].map(() => new_dna()).join(\"\")\r\nconst new_codon = () => new_sequence(2+Math.floor(Math.random()*Math.sqrt(SEQ_LEN)))\r\n\r\nexport class GeneSheet {\r\n    sequence: string;\r\n    constructor(sequence?: string) {\r\n        if(sequence != undefined) {\r\n            if(sequence.length == SEQ_LEN) {\r\n                this.sequence = sequence\r\n                return\r\n            }\r\n        }\r\n        this.sequence = new_sequence(SEQ_LEN)\r\n        return\r\n    }\r\n}\r\n\r\nexport function initGeneSeries(num:number) {\r\n    UNIV_CODONS = buildCodons(num)\r\n}\r\n\r\nexport function buildCodons(codon_num:number) {\r\n    const codon_list = []\r\n    for(let i = 0; i < codon_num; i++) {\r\n        codon_list.push(new_codon())\r\n    }\r\n    return codon_list //?\r\n}\r\n\r\n\r\nexport function getGeneSheetGlobals() {\r\n    return {SEQ_LEN: SEQ_LEN,\r\n            DNA_DESC: DNA_DESC,\r\n            CODON_FEATS: CODON_FEATS,\r\n            UNIV_CODONS: UNIV_CODONS,\r\n            new_dna: new_dna,\r\n            new_sequence: new_sequence,\r\n            new_codon: new_codon\r\n    }\r\n}\r\n","import _ from \"lodash\"\r\nimport { GeneSheet, UNIV_CODONS } from  \"./genesheet\"\r\n\r\nexport class Organism {\r\n    genome : GeneSheet;\r\n    constructor(sequence?: string) {\r\n        this.genome = new GeneSheet(sequence)\r\n    }\r\n}\r\n\r\nexport class Population {\r\n    organisms: Organism[]\r\n    constructor(pop_size?:number, organism_import?: Organism[]) {\r\n        this.organisms = []\r\n        if(organism_import != null) {\r\n            this.organisms = this.organisms.concat(organism_import)\r\n        }\r\n        if(pop_size != null) {\r\n            for(let i = 0; i < pop_size; i++) {\r\n                this.organisms.push(new Organism)\r\n            }\r\n        }\r\n    }\r\n    import(organisms:Organism[]) {\r\n        organisms.map(d => this.organisms.push(d))\r\n    }\r\n    select_for(codons:string[]) {\r\n        let selected_organisms:Organism[] = []\r\n        this.organisms.forEach(organism => {\r\n            for(let i = 0; i < codons.length; i++) {\r\n                if(organism.genome.sequence.includes(codons[i])) {\r\n                    selected_organisms.push(organism)\r\n                    break\r\n                }\r\n            }\r\n        })\r\n        this.organisms = selected_organisms\r\n    }\r\n    select_against(codons:string[]) {\r\n        let selected_organisms:Organism[] = []\r\n        this.organisms.forEach(organism => {\r\n            for(let i = 0; i < codons.length; i++) {\r\n                if(organism.genome.sequence.includes(codons[i])) {\r\n                    return\r\n                }\r\n            }\r\n            selected_organisms.push(organism)\r\n        })\r\n        this.organisms = selected_organisms\r\n    }\r\n}\r\n","import _ from \"lodash\"\r\n\r\nclass Environment {\r\n    water: number\r\n    temperature: number\r\n    constructor(environ_id: number) {\r\n        // const curr_date = new Date()\r\n        // const environ_id = curr_date.getTimezoneOffset()/60\r\n        this.water = Math.abs((environ_id-2)*10)\r\n        this.temperature = Math.abs((environ_id+3)*10)\r\n    }\r\n}\r\n\r\nexport function getEnvironment(environ_id: number) {\r\n    const environ = new Environment(environ_id)\r\n    return {water: environ.water, temperature: environ.temperature}\r\n}\r\n\r\n\r\n\r\n\r\n","import _ from \"lodash\"\r\nimport { GeneSheet, initGeneSeries, buildCodons } from \"./genesheet\"\r\nimport { Organism, Population } from \"./organism\"\r\nimport { getEnvironment } from \"./environment\"\r\n\r\n\r\nlet oogie = new Organism(\"ATGAAAAGAAAA\") //?.\r\n\r\noogie.genome //?\r\n\r\ngetEnvironment(0) //?\r\n\r\ninitGeneSeries(2) //?.\r\n\r\nlet pop = new Population(25, [oogie]) //?\r\n\r\npop.organisms.length //?\r\nconsole.log(pop.organisms.length)\r\n\r\npop.select_for([\"AA\", \"ATG\"]) //?.\r\npop.select_for([\"AAT\"])\r\n\r\npop.organisms.length //?\r\nconsole.log(pop.organisms)\r\n"]}